// This file was automatically generated by utils/collect_schemas.sh
// The schemas are stored in the reconciliation-api/specs repository.
// If any changes to the schema should be made, please do it there instead!
// Any local changes will be overridden by the next update.

export const specVersions = [
"0.1",
"0.2",
"draft",
];

export const specSchemas = {
"0.1": {
"data-extension-query":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/data-extension-query.json",
  "type": "object",
  "description": "This schema validates a data extension query",
  "properties": {
    "ids": {
      "type": "array",
      "description": "The list of entity identifiers to fetch property values from",
      "items": {
        "type": "string"
      }
    },
    "properties": {
      "type": "array",
      "description": "The list of properties to fetch, with their optional configuration",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "id"
        ]
      }
    }
  },
  "required": [
    "ids",
    "properties"
  ]
}
,
"data-extension-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/data-extension-response.json",
  "type": "object",
  "description": "This schema validates a data extension response",
  "properties": {
    "meta": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "rows": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "str": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "str"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "float": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "float"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "int": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "int"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "Date and time formatted in ISO format",
                        "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$"
                      }
                    },
                    "required": [
                      "date"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "rows",
    "meta"
  ]
}
,
"manifest":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/manifest.json",
  "type": "object",
  "description": "This validates a service manifest, describing the features supported by the endpoint.",
  "properties": {
    "name": {
      "type": "string",
      "description": "A human-readable name for the service or data source"
    },
    "identifierSpace": {
      "type": "string",
      "description": "A URI describing the entity identifiers used in this service"
    },
    "schemaSpace": {
      "type": "string",
      "description": "A URI describing the schema used in this service"
    },
    "view": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "A template to transform an entity identifier into the corresponding URI",
          "pattern": ".*\\{\\{id\\}\\}.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "defaultTypes": {
      "type": "array",
      "description": "A list of default types that are considered good generic choices for reconciliation",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "uniqueItems": true
    },
    "suggest": {
      "type": "object",
      "description": "Settings for the suggest protocol, to auto-complete entities, properties and types",
      "definitions": {
        "service_definition": {
          "type": "object",
          "properties": {
            "service_url": {
              "type": "string"
            },
            "service_path": {
              "type": "string"
            },
            "flyout_service_url": {
              "type": "string"
            },
            "flyout_service_path": {
              "type": "string",
              "pattern": ".*\\$\\{id\\}.*"
            }
          },
          "required": []
        }
      },
      "properties": {
        "entity": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        },
        "property": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        },
        "type": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        }
      }
    },
    "preview": {
      "type": "object",
      "description": "Settings for the preview protocol, for HTML previews of entities",
      "properties": {
        "url": {
          "type": "string",
          "pattern": ".*\\{\\{id\\}\\}.*",
          "description": "A URL pattern which transforms the entity ID into a preview URL for it"
        },
        "width": {
          "type": "integer",
          "description": "The width of the iframe where to include the HTML preview"
        },
        "height": {
          "type": "integer",
          "description": "The height of the iframe where to include the HTML preview"
        }
      },
      "required": [
        "url",
        "width",
        "height"
      ]
    },
    "extend": {
      "type": "object",
      "description": "Settings for the data extension protocol, to fetch property values",
      "properties": {
        "propose_properties": {
          "type": "object",
          "description": "Location of the endpoint to propose properties to fetch for a given type",
          "properties": {
            "service_url": {
              "type": "string"
            },
            "service_path": {
              "type": "string"
            }
          }
        },
        "property_settings": {
          "type": "array",
          "description": "Definition of the settings configurable by the user when fetching a property",
          "items": {
            "oneOf": [
              {
                "type": "object",
                "description": "Defines a numerical setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "number"
                    ]
                  },
                  "default": {
                    "type": "number"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a string setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a boolean setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "checkbox"
                    ]
                  },
                  "default": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a setting with a fixed set of choices",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "select"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "value",
                        "name"
                      ]
                    }
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name",
                  "choices"
                ]
              }
            ]
          }
        }
      }
    }
  },
  "required": [
    "name",
    "identifierSpace",
    "schemaSpace"
  ]
}
,
"reconciliation-query-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/reconciliation-query.json",
  "type": "object",
  "description": "This schema validates the JSON serialization of any reconciliation query batch, i.e. the payload of a GET/POST to a reconciliation endpoint.",
  "definitions": {
    "property_value": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "description": "A property value which represents another entity, for instance if it was previously reconciled itself",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        }
      ]
    }
  },
  "patternProperties": {
    "^.*$": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A string to be matched against the name of the entities"
        },
        "type": {
          "description": "Either a single type identifier or a list of type identifiers",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "limit": {
          "type": "number",
          "description": "The maximum number of candidates to return"
        },
        "properties": {
          "type": "array",
          "description": "An optional list of property mappings to refine the query",
          "items": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "string",
                "description": "The identifier of the property, whose values will be compared to the values supplied"
              },
              "v": {
                "description": "A value (or array of values) to match against the property values associated with the property on each candidate",
                "oneOf": [
                  {
                    "$ref": "#/definitions/property_value"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/property_value"
                    }
                  }
                ]
              }
            },
            "required": [
              "pid",
              "v"
            ]
          }
        },
        "type_strict": {
          "type": "string",
          "description": "A classification of the type matching strategy when multiple types are supplied",
          "enum": [
            "any",
            "should",
            "all"
          ]
        }
      },
      "required": [
        "query"
      ],
      "additionalProperties": false
    }
  }
}
,
"reconciliation-result-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/reconciliation-result-batch.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON serialization of any reconciliation result batch.",
  "patternProperties": {
    "^.*$": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Entity identifier of the candidate"
              },
              "name": {
                "type": "string",
                "description": "Entity name of the candidate"
              },
              "score": {
                "type": "number",
                "description": "Number indicating how likely it is that the candidate matches the query"
              },
              "match": {
                "type": "boolean",
                "description": "Boolean value indicating whether the candiate is a certain match or not."
              },
              "type": {
                "type": "array",
                "description": "Types the candidate entity belongs to",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A type can be given by id and name",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "type": "string",
                      "description": "Alternatively, if only a string is given, it is treated as the id"
                    }
                  ]
                }
              }
            },
            "required": [
              "id",
              "name",
              "score"
            ]
          }
        }
      },
      "required": [
        "result"
      ]
    }
  }
}
,
"suggest-entities-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/suggest-entities-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for entities.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested entity"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          },
          "notable": {
            "type": "array",
            "description": "Types the suggest entity belongs to",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "A type can be given by id and name",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                {
                  "type": "string",
                  "description": "Alternatively, if only a string is given, it is treated as the id"
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-properties-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/suggest-properties-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for properties.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested property"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested property"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-types-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.1/schemas/suggest-types-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for types.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested type"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested type"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
},
"0.2": {
"data-extension-property-proposal":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/data-extension-property-proposal.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a property proposal endpoint (part of the data extension feature).",
  "properties": {
    "properties": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested property"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested property"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "type": {
       "type": "string",
       "description": "The identifier of the type for which those properties are suggested"
    },
    "limit": {
       "type": "number",
       "description": "The maximum number of results requested."
    }
  },
  "required": [
    "properties"
  ]
}
,
"data-extension-query":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/data-extension-query.json",
  "type": "object",
  "description": "This schema validates a data extension query",
  "properties": {
    "ids": {
      "type": "array",
      "description": "The list of entity identifiers to fetch property values from",
      "items": {
        "type": "string"
      }
    },
    "properties": {
      "type": "array",
      "description": "The list of properties to fetch, with their optional configuration",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "id"
        ]
      }
    }
  },
  "required": [
    "ids",
    "properties"
  ]
}
,
"data-extension-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/data-extension-response.json",
  "type": "object",
  "description": "This schema validates a data extension response",
  "properties": {
    "meta": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ]
          },
          "service": {
            "type": "string",
            "format": "uri",
            "pattern": "^https?://"
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "rows": {
      "type": "object",
      "patternProperties": {
        ".*": {
          "type": "object",
          "patternProperties": {
            ".*": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "str": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "str"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "float": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "float"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "int": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "int"
                    ],
                    "additionalProperties": false
                  },
                  {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "description": "Date and time formatted in ISO format",
                        "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$"
                      }
                    },
                    "required": [
                      "date"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "rows",
    "meta"
  ]
}
,
"manifest":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/manifest.json",
  "type": "object",
  "description": "This validates a service manifest, describing the features supported by the endpoint.",
  "properties": {
    "versions": {
      "type": "array",
      "description": "The list of API versions supported by this service.",
      "items": {
        "type": "string"
      },
      "contains": {
        "enum": ["0.2"]
      }
    },
    "name": {
      "type": "string",
      "description": "A human-readable name for the service or data source"
    },
    "identifierSpace": {
      "type": "string",
      "description": "A URI describing the entity identifiers used in this service"
    },
    "schemaSpace": {
      "type": "string",
      "description": "A URI describing the schema used in this service"
    },
    "documentation": {
      "type": "string",
      "description": "A URI which hosts documentation about this service"
    },
    "serviceVersion": {
      "type": "string",
      "description": "A string representing the version of the software which exposes this service"
    },
    "logo": {
      "type": "string",
      "description": "A URI to a square image which can be used as logo for this service"
    },
    "authentication": {
      "$ref": "http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties"
    },
    "view": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "A template to transform an entity identifier into the corresponding URI",
          "pattern": ".*\\{\\{id\\}\\}.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "feature_view": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "A template to transform a matching feature identifier into the corresponding URI",
          "pattern": ".*\\{\\{id\\}\\}.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "defaultTypes": {
      "type": "array",
      "description": "A list of default types that are considered good generic choices for reconciliation",
      "items": { "$ref": "type.json" },
      "uniqueItems": true
    },
    "suggest": {
      "type": "object",
      "description": "Settings for the suggest protocol, to auto-complete entities, properties and types",
      "definitions": {
        "service_definition": {
          "type": "object",
          "properties": {
            "service_url": {
              "type": "string"
            },
            "service_path": {
              "type": "string"
            },
            "flyout_service_url": {
              "type": "string"
            },
            "flyout_service_path": {
              "type": "string",
              "pattern": ".*\\$\\{id\\}.*"
            }
          },
          "required": []
        }
      },
      "properties": {
        "entity": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        },
        "property": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        },
        "type": {
          "$ref": "#/properties/suggest/definitions/service_definition"
        }
      }
    },
    "preview": {
      "type": "object",
      "description": "Settings for the preview protocol, for HTML previews of entities",
      "properties": {
        "url": {
          "type": "string",
          "pattern": ".*\\{\\{id\\}\\}.*",
          "description": "A URL pattern which transforms the entity ID into a preview URL for it"
        },
        "width": {
          "type": "integer",
          "description": "The width of the iframe where to include the HTML preview"
        },
        "height": {
          "type": "integer",
          "description": "The height of the iframe where to include the HTML preview"
        }
      },
      "required": [
        "url",
        "width",
        "height"
      ]
    },
    "extend": {
      "type": "object",
      "description": "Settings for the data extension protocol, to fetch property values",
      "properties": {
        "propose_properties": {
          "type": "object",
          "description": "Location of the endpoint to propose properties to fetch for a given type",
          "properties": {
            "service_url": {
              "type": "string"
            },
            "service_path": {
              "type": "string"
            }
          }
        },
        "property_settings": {
          "type": "array",
          "description": "Definition of the settings configurable by the user when fetching a property",
          "items": {
            "oneOf": [
              {
                "type": "object",
                "description": "Defines a numerical setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "number"
                    ]
                  },
                  "default": {
                    "type": "number"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a string setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a boolean setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "checkbox"
                    ]
                  },
                  "default": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a setting with a fixed set of choices",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "select"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "value",
                        "name"
                      ]
                    }
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name",
                  "choices"
                ]
              }
            ]
          }
        }
      }
    }
  },
  "required": [
    "versions",
    "name",
    "identifierSpace",
    "schemaSpace"
  ]
}
,
"openapi":
{
  "title": "A JSON Schema for Swagger 2.0 API.",
  "$id": "http://swagger.io/v2/schema.json#",
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "required": [
    "swagger",
    "info",
    "paths"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/vendorExtension"
    }
  },
  "properties": {
    "swagger": {
      "type": "string",
      "enum": [
        "2.0"
      ],
      "description": "The Swagger version of this document."
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "host": {
      "type": "string",
      "pattern": "^[^{}/ :\\\\]+(?::\\d+)?$",
      "description": "The host (name or ip) of the API. Example: 'swagger.io'"
    },
    "basePath": {
      "type": "string",
      "pattern": "^/",
      "description": "The base path to the API. Example: '/api'."
    },
    "schemes": {
      "$ref": "#/definitions/schemesList"
    },
    "consumes": {
      "description": "A list of MIME types accepted by the API.",
      "allOf": [
        {
          "$ref": "#/definitions/mediaTypeList"
        }
      ]
    },
    "produces": {
      "description": "A list of MIME types the API can produce.",
      "allOf": [
        {
          "$ref": "#/definitions/mediaTypeList"
        }
      ]
    },
    "paths": {
      "$ref": "#/definitions/paths"
    },
    "definitions": {
      "$ref": "#/definitions/definitions"
    },
    "parameters": {
      "$ref": "#/definitions/parameterDefinitions"
    },
    "responses": {
      "$ref": "#/definitions/responseDefinitions"
    },
    "security": {
      "$ref": "#/definitions/security"
    },
    "securityDefinitions": {
      "$ref": "#/definitions/securityDefinitions"
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "uniqueItems": true
    },
    "externalDocs": {
      "$ref": "#/definitions/externalDocs"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "General information about the API.",
      "required": [
        "version",
        "title"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "title": {
          "type": "string",
          "description": "A unique and precise title of the API."
        },
        "version": {
          "type": "string",
          "description": "A semantic version number of the API."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed."
        },
        "termsOfService": {
          "type": "string",
          "description": "The terms of service for the API."
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "license": {
          "$ref": "#/definitions/license"
        }
      }
    },
    "contact": {
      "type": "object",
      "description": "Contact information for the owners of the API.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information.",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization.",
          "format": "email"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "license": {
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the license type. It's encouraged to use an OSI compatible license."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the license.",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "paths": {
      "type": "object",
      "description": "Relative paths to the individual endpoints. They must be relative to the 'basePath'.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^/": {
          "$ref": "#/definitions/pathItem"
        }
      },
      "additionalProperties": false
    },
    "definitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/schema"
      },
      "description": "One or more JSON objects describing the schemas being consumed and produced by the API."
    },
    "parameterDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/parameter"
      },
      "description": "One or more JSON representations for parameters"
    },
    "responseDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/response"
      },
      "description": "One or more JSON representations for responses"
    },
    "externalDocs": {
      "type": "object",
      "additionalProperties": false,
      "description": "information about external documentation",
      "required": [
        "url"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "examples": {
      "type": "object",
      "additionalProperties": true
    },
    "mimeType": {
      "type": "string",
      "description": "The MIME type of the HTTP message."
    },
    "operation": {
      "type": "object",
      "required": [
        "responses"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "summary": {
          "type": "string",
          "description": "A brief summary of the operation."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the operation, GitHub Flavored Markdown is allowed."
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "operationId": {
          "type": "string",
          "description": "A unique identifier of the operation."
        },
        "produces": {
          "description": "A list of MIME types the API can produce.",
          "allOf": [
            {
              "$ref": "#/definitions/mediaTypeList"
            }
          ]
        },
        "consumes": {
          "description": "A list of MIME types the API can consume.",
          "allOf": [
            {
              "$ref": "#/definitions/mediaTypeList"
            }
          ]
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        },
        "responses": {
          "$ref": "#/definitions/responses"
        },
        "schemes": {
          "$ref": "#/definitions/schemesList"
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "security": {
          "$ref": "#/definitions/security"
        }
      }
    },
    "pathItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "get": {
          "$ref": "#/definitions/operation"
        },
        "put": {
          "$ref": "#/definitions/operation"
        },
        "post": {
          "$ref": "#/definitions/operation"
        },
        "delete": {
          "$ref": "#/definitions/operation"
        },
        "options": {
          "$ref": "#/definitions/operation"
        },
        "head": {
          "$ref": "#/definitions/operation"
        },
        "patch": {
          "$ref": "#/definitions/operation"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        }
      }
    },
    "responses": {
      "type": "object",
      "description": "Response objects names can either be any valid HTTP status code or 'default'.",
      "minProperties": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^([0-9]{3})$|^(default)$": {
          "$ref": "#/definitions/responseValue"
        },
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "not": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^x-": {
            "$ref": "#/definitions/vendorExtension"
          }
        }
      }
    },
    "responseValue": {
      "oneOf": [
        {
          "$ref": "#/definitions/response"
        },
        {
          "$ref": "#/definitions/jsonReference"
        }
      ]
    },
    "response": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "$ref": "#/definitions/fileSchema"
            }
          ]
        },
        "headers": {
          "$ref": "#/definitions/headers"
        },
        "examples": {
          "$ref": "#/definitions/examples"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "headers": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/header"
      }
    },
    "header": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "vendorExtension": {
      "description": "Any property starting with x- is valid.",
      "additionalProperties": true
    },
    "bodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "schema"
      ],
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "body"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "schema": {
          "$ref": "#/definitions/schema"
        }
      },
      "additionalProperties": false
    },
    "headerParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "header"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "queryParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "query"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "formDataParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "formData"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array",
            "file"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "pathParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "required"
      ],
      "properties": {
        "required": {
          "type": "boolean",
          "enum": [
            true
          ],
          "description": "Determines whether or not this parameter is required or optional."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "path"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "nonBodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "type"
      ],
      "oneOf": [
        {
          "$ref": "#/definitions/headerParameterSubSchema"
        },
        {
          "$ref": "#/definitions/formDataParameterSubSchema"
        },
        {
          "$ref": "#/definitions/queryParameterSubSchema"
        },
        {
          "$ref": "#/definitions/pathParameterSubSchema"
        }
      ]
    },
    "parameter": {
      "oneOf": [
        {
          "$ref": "#/definitions/bodyParameter"
        },
        {
          "$ref": "#/definitions/nonBodyParameter"
        }
      ]
    },
    "schema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "title": {
        },
        "description": {
        },
        "default": {
        },
        "multipleOf": {
        },
        "maximum": {
        },
        "exclusiveMaximum": {
        },
        "minimum": {
        },
        "exclusiveMinimum": {
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "pattern": {
        },
        "maxItems": {
          "type": "integer"
        },
        "minItems": {
          "type": "integer"
        },
        "uniqueItems": {
        },
        "maxProperties": {
          "type": "integer"
        },
        "minProperties": {
          "type": "integer"
        },
        "required": {
        },
        "enum": {
        },
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "boolean"
            }
          ],
          "default": {}
        },
        "type": {
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/schema"
              }
            }
          ],
          "default": {}
        },
        "allOf": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/schema"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema"
          },
          "default": {}
        },
        "discriminator": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "xml": {
          "$ref": "#/definitions/xml"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "fileSchema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "type"
      ],
      "properties": {
        "format": {
          "type": "string"
        },
        "title": {
        },
        "description": {
        },
        "default": {
        },
        "required": {
        },
        "type": {
          "type": "string",
          "enum": [
            "file"
          ]
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "primitivesItems": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "security": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityRequirement"
      },
      "uniqueItems": true
    },
    "securityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "uniqueItems": true
      }
    },
    "xml": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "tag": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "securityDefinitions": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/basicAuthenticationSecurity"
          },
          {
            "$ref": "#/definitions/apiKeySecurity"
          },
          {
            "$ref": "#/definitions/oauth2ImplicitSecurity"
          },
          {
            "$ref": "#/definitions/oauth2PasswordSecurity"
          },
          {
            "$ref": "#/definitions/oauth2ApplicationSecurity"
          },
          {
            "$ref": "#/definitions/oauth2AccessCodeSecurity"
          }
        ]
      }
    },
    "basicAuthenticationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "basic"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "apiKeySecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name",
        "in"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "apiKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "header",
            "query"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ImplicitSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "implicit"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2PasswordSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "password"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ApplicationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "application"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2AccessCodeSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "accessCode"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2Scopes": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "mediaTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/mimeType"
      },
      "uniqueItems": true
    },
    "parametersList": {
      "type": "array",
      "description": "The parameters needed to send a valid API call.",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/parameter"
          },
          {
            "$ref": "#/definitions/jsonReference"
          }
        ]
      },
      "uniqueItems": true
    },
    "schemesList": {
      "type": "array",
      "description": "The transfer protocol of the API.",
      "items": {
        "type": "string",
        "enum": [
          "http",
          "https",
          "ws",
          "wss"
        ]
      },
      "uniqueItems": true
    },
    "collectionFormat": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes"
      ],
      "default": "csv"
    },
    "collectionFormatWithMulti": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes",
        "multi"
      ],
      "default": "csv"
    },
    "title": {
    },
    "description": {
    },
    "default": {
    },
    "multipleOf": {
    },
    "maximum": {
    },
    "exclusiveMaximum": {
    },
    "minimum": {
    },
    "exclusiveMinimum": {
    },
    "maxLength": {
      "type": "integer"
    },
    "minLength": {
      "type": "integer"
    },
    "pattern": {
    },
    "maxItems": {
      "type": "integer"
    },
    "minItems": {
      "type": "integer"
    },
    "uniqueItems": {
    },
    "enum": {
    },
    "jsonReference": {
      "type": "object",
      "required": [
        "$ref"
      ],
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "type": "string"
        }
      }
    }
  }
}
,
"reconciliation-query-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/reconciliation-query.json",
  "type": "object",
  "description": "This schema validates the JSON serialization of any reconciliation query batch, i.e. the payload of a GET/POST to a reconciliation endpoint.",
  "definitions": {
    "property_value": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "description": "A property value which represents another entity, for instance if it was previously reconciled itself",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        }
      ]
    }
  },
  "patternProperties": {
    "^.*$": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "A string to be matched against the name of the entities"
        },
        "type": {
          "description": "Either a single type identifier or a list of type identifiers",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "limit": {
          "type": "number",
          "description": "The maximum number of candidates to return"
        },
        "properties": {
          "type": "array",
          "description": "An optional list of property mappings to refine the query",
          "items": {
            "type": "object",
            "properties": {
              "pid": {
                "type": "string",
                "description": "The identifier of the property, whose values will be compared to the values supplied"
              },
              "v": {
                "description": "A value (or array of values) to match against the property values associated with the property on each candidate",
                "oneOf": [
                  {
                    "$ref": "#/definitions/property_value"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/property_value"
                    }
                  }
                ]
              }
            },
            "required": [
              "pid",
              "v"
            ]
          }
        },
        "type_strict": {
          "type": "string",
          "description": "A classification of the type matching strategy when multiple types are supplied",
          "enum": [
            "any",
            "should",
            "all"
          ]
        }
      },
      "anyOf": [
        {
          "required": [
            "query"
          ]
        },
        {
          "required": [
            "properties"
          ],
          "properties": {
            "properties": {
              "type": "array",
              "minItems": 1
            }
          }
        }
      ],
      "additionalProperties": false
    }
  }
}
,
"reconciliation-result-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/reconciliation-result-batch.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON serialization of any reconciliation result batch.",
  "patternProperties": {
    "^.*$": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Entity identifier of the candidate"
              },
              "name": {
                "type": "string",
                "description": "Entity name of the candidate"
              },
              "description": {
                "type": "string",
                "description": "Optional description of the candidate entity"
              },
              "score": {
                "type": "number",
                "description": "Number indicating how likely it is that the candidate matches the query"
              },
              "features": {
                "type": "array",
                "description": "A list of features which can be used to derive a matching score",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "A unique string identifier for the feature"
                    },
                    "value": {
                      "description": "The value of the feature for this reconciliation candidate",
                      "oneOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    }
                  }
                }
              },
              "match": {
                "type": "boolean",
                "description": "Boolean value indicating whether the candiate is a certain match or not."
              },
              "type": {
                "type": "array",
                "description": "Types the candidate entity belongs to",
                "items": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "A type can be given by id and name",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "type": "string",
                      "description": "Alternatively, if only a string is given, it is treated as the id"
                    }
                  ]
                }
              }
            },
            "required": [
              "id",
              "name",
              "score"
            ]
          }
        }
      },
      "required": [
        "result"
      ]
    }
  }
}
,
"suggest-entities-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/suggest-entities-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for entities.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested entity"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          },
          "notable": {
            "type": "array",
            "description": "Types the suggest entity belongs to",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "A type can be given by id and name",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                {
                  "type": "string",
                  "description": "Alternatively, if only a string is given, it is treated as the id"
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-properties-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/suggest-properties-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for properties.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested property"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested property"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-types-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/suggest-types-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for types.",
  "properties": {
    "result": {
      "type": "array",
      "items": { "$ref": "type.json" }
    }
  },
  "required": [
    "result"
  ]
}
,
"type":
{
    "$id": "https://reconciliation-api.github.io/specs/0.2/schemas/type.json",
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "description": "Identifier of the suggested type"
        },
        "name": {
            "type": "string",
            "description": "Name of the suggested type"
        },
        "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
        },
        "broader": {
            "type": "array",
            "description": "An optional array of types, each representing a direct (i.e., immediate) broader category of entities.",
            "items": {
                "$ref": "type.json"
            }
        }
    },
    "required": [
        "id",
        "name"
    ]
}
,
},
"draft": {
"data-extension-property-proposal":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/data-extension-property-proposal.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a property proposal endpoint (part of the data extension feature).",
  "properties": {
    "properties": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested property"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested property"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "type": {
       "type": "string",
       "description": "The identifier of the type for which those properties are suggested"
    },
    "limit": {
       "type": "number",
       "description": "The maximum number of results requested."
    }
  },
  "required": [
    "properties"
  ]
}
,
"data-extension-query":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/data-extension-query.json",
  "type": "object",
  "description": "This schema validates a data extension query",
  "properties": {
    "ids": {
      "type": "array",
      "description": "The list of entity identifiers to fetch property values from",
      "items": {
        "type": "string"
      }
    },
    "properties": {
      "type": "array",
      "description": "The list of properties to fetch, with their optional configuration",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "id"
        ]
      }
    }
  },
  "required": [
    "ids",
    "properties"
  ]
}
,
"data-extension-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/data-extension-response.json",
  "type": "object",
  "description": "This schema validates a data extension response",
  "properties": {
    "meta": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id"
            ]
          },
          "service": {
            "type": "string",
            "format": "uri",
            "pattern": "^https?://"
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    },
    "rows": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An entity identifier supplied in the query"
          },
          "properties": {
            "type": "array",
            "description": "The list of property values for this entity",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A property identifier supplied in the query"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "lang": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "str": {
                            "type": "string"
                          },
                          "lang": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "str"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "float": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "float"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "int": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "int"
                        ],
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "description": "Date and time formatted in ISO format",
                            "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$"
                          }
                        },
                        "required": [
                          "date"
                        ],
                        "additionalProperties": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "required": [
    "rows",
    "meta"
  ]
}
,
"manifest":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/manifest.json",
  "type": "object",
  "description": "This validates a service manifest, describing the features supported by the endpoint.",
  "properties": {
    "versions": {
      "type": "array",
      "description": "The list of API versions supported by this service.",
      "items": {
        "type": "string"
      },
      "contains": {
        "enum": ["0.2"]
      }
    },
    "name": {
      "type": "string",
      "description": "A human-readable name for the service or data source"
    },
    "identifierSpace": {
      "type": "string",
      "description": "A URI describing the entity identifiers used in this service"
    },
    "schemaSpace": {
      "type": "string",
      "description": "A URI describing the schema used in this service"
    },
    "documentation": {
      "type": "string",
      "description": "A URI which hosts documentation about this service"
    },
    "serviceVersion": {
      "type": "string",
      "description": "A string representing the version of the software which exposes this service"
    },
    "logo": {
      "type": "string",
      "description": "A URI to a square image which can be used as logo for this service"
    },
    "authentication": {
      "$ref": "http://swagger.io/v2/schema.json#/definitions/securityDefinitions/additionalProperties"
    },
    "view": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "A template to transform an entity identifier into the corresponding URI",
          "pattern": ".*\\{.*id.*\\}.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "feature_view": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "A template to transform a matching feature identifier into the corresponding URI",
          "pattern": ".*\\{.*id.*\\}.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "defaultTypes": {
      "type": "array",
      "description": "A list of default types that are considered good generic choices for reconciliation",
      "items": { "$ref": "type.json" },
      "uniqueItems": true
    },
    "suggest": {
      "type": "object",
      "description": "Settings for the suggest protocol, to auto-complete entities, properties and types",
      "properties": {
        "entity": {
          "type": "boolean",
          "description": "Whether the service supports suggestion of entities, in which case it should offer a /suggest/entity endpoint"
        },
        "property": {
          "type": "boolean",
          "description": "Whether the service supports suggestion of properties, in which case it should offer a /suggest/property endpoint"
        },
        "type": {
          "type": "boolean",
          "description": "Whether the service supports suggestion of types, in which case it should offer a /suggest/type endpoint"
        }
      },
      "required": [ "entity", "property", "type" ]
    },
    "preview": {
      "type": "object",
      "description": "Settings for the preview protocol, for HTML previews of entities",
      "properties": {
        "width": {
          "type": "integer",
          "description": "The width of the iframe where to include the HTML preview"
        },
        "height": {
          "type": "integer",
          "description": "The height of the iframe where to include the HTML preview"
        }
      },
      "required": [
        "width",
        "height"
      ]
    },
    "extend": {
      "type": "object",
      "description": "Settings for the data extension protocol, to fetch property values",
      "properties": {
        "propose_properties": {
          "type": "boolean",
          "description": "Whether the service supports property proposals"
        },
        "property_settings": {
          "type": "array",
          "description": "Definition of the settings configurable by the user when fetching a property",
          "items": {
            "oneOf": [
              {
                "type": "object",
                "description": "Defines a numerical setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "number"
                    ]
                  },
                  "default": {
                    "type": "number"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a string setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a boolean setting on a property",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "checkbox"
                    ]
                  },
                  "default": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name"
                ]
              },
              {
                "type": "object",
                "description": "Defines a setting with a fixed set of choices",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "select"
                    ]
                  },
                  "default": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "help_text": {
                    "type": "string"
                  },
                  "choices": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "value": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "value",
                        "name"
                      ]
                    }
                  }
                },
                "required": [
                  "type",
                  "label",
                  "name",
                  "choices"
                ]
              }
            ]
          }
        }
      }
    }
  },
  "required": [
    "versions",
    "name",
    "identifierSpace",
    "schemaSpace"
  ]
}
,
"openapi":
{
  "title": "A JSON Schema for Swagger 2.0 API.",
  "$id": "http://swagger.io/v2/schema.json#",
  "$schema": "http://json-schema.org/schema#",
  "type": "object",
  "required": [
    "swagger",
    "info",
    "paths"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/vendorExtension"
    }
  },
  "properties": {
    "swagger": {
      "type": "string",
      "enum": [
        "2.0"
      ],
      "description": "The Swagger version of this document."
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "host": {
      "type": "string",
      "pattern": "^[^{}/ :\\\\]+(?::\\d+)?$",
      "description": "The host (name or ip) of the API. Example: 'swagger.io'"
    },
    "basePath": {
      "type": "string",
      "pattern": "^/",
      "description": "The base path to the API. Example: '/api'."
    },
    "schemes": {
      "$ref": "#/definitions/schemesList"
    },
    "consumes": {
      "description": "A list of MIME types accepted by the API.",
      "allOf": [
        {
          "$ref": "#/definitions/mediaTypeList"
        }
      ]
    },
    "produces": {
      "description": "A list of MIME types the API can produce.",
      "allOf": [
        {
          "$ref": "#/definitions/mediaTypeList"
        }
      ]
    },
    "paths": {
      "$ref": "#/definitions/paths"
    },
    "definitions": {
      "$ref": "#/definitions/definitions"
    },
    "parameters": {
      "$ref": "#/definitions/parameterDefinitions"
    },
    "responses": {
      "$ref": "#/definitions/responseDefinitions"
    },
    "security": {
      "$ref": "#/definitions/security"
    },
    "securityDefinitions": {
      "$ref": "#/definitions/securityDefinitions"
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "uniqueItems": true
    },
    "externalDocs": {
      "$ref": "#/definitions/externalDocs"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "General information about the API.",
      "required": [
        "version",
        "title"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "title": {
          "type": "string",
          "description": "A unique and precise title of the API."
        },
        "version": {
          "type": "string",
          "description": "A semantic version number of the API."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed."
        },
        "termsOfService": {
          "type": "string",
          "description": "The terms of service for the API."
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "license": {
          "$ref": "#/definitions/license"
        }
      }
    },
    "contact": {
      "type": "object",
      "description": "Contact information for the owners of the API.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information.",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization.",
          "format": "email"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "license": {
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the license type. It's encouraged to use an OSI compatible license."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the license.",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "paths": {
      "type": "object",
      "description": "Relative paths to the individual endpoints. They must be relative to the 'basePath'.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^/": {
          "$ref": "#/definitions/pathItem"
        }
      },
      "additionalProperties": false
    },
    "definitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/schema"
      },
      "description": "One or more JSON objects describing the schemas being consumed and produced by the API."
    },
    "parameterDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/parameter"
      },
      "description": "One or more JSON representations for parameters"
    },
    "responseDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/response"
      },
      "description": "One or more JSON representations for responses"
    },
    "externalDocs": {
      "type": "object",
      "additionalProperties": false,
      "description": "information about external documentation",
      "required": [
        "url"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "examples": {
      "type": "object",
      "additionalProperties": true
    },
    "mimeType": {
      "type": "string",
      "description": "The MIME type of the HTTP message."
    },
    "operation": {
      "type": "object",
      "required": [
        "responses"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "summary": {
          "type": "string",
          "description": "A brief summary of the operation."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the operation, GitHub Flavored Markdown is allowed."
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "operationId": {
          "type": "string",
          "description": "A unique identifier of the operation."
        },
        "produces": {
          "description": "A list of MIME types the API can produce.",
          "allOf": [
            {
              "$ref": "#/definitions/mediaTypeList"
            }
          ]
        },
        "consumes": {
          "description": "A list of MIME types the API can consume.",
          "allOf": [
            {
              "$ref": "#/definitions/mediaTypeList"
            }
          ]
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        },
        "responses": {
          "$ref": "#/definitions/responses"
        },
        "schemes": {
          "$ref": "#/definitions/schemesList"
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "security": {
          "$ref": "#/definitions/security"
        }
      }
    },
    "pathItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "get": {
          "$ref": "#/definitions/operation"
        },
        "put": {
          "$ref": "#/definitions/operation"
        },
        "post": {
          "$ref": "#/definitions/operation"
        },
        "delete": {
          "$ref": "#/definitions/operation"
        },
        "options": {
          "$ref": "#/definitions/operation"
        },
        "head": {
          "$ref": "#/definitions/operation"
        },
        "patch": {
          "$ref": "#/definitions/operation"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        }
      }
    },
    "responses": {
      "type": "object",
      "description": "Response objects names can either be any valid HTTP status code or 'default'.",
      "minProperties": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^([0-9]{3})$|^(default)$": {
          "$ref": "#/definitions/responseValue"
        },
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "not": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^x-": {
            "$ref": "#/definitions/vendorExtension"
          }
        }
      }
    },
    "responseValue": {
      "oneOf": [
        {
          "$ref": "#/definitions/response"
        },
        {
          "$ref": "#/definitions/jsonReference"
        }
      ]
    },
    "response": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "$ref": "#/definitions/fileSchema"
            }
          ]
        },
        "headers": {
          "$ref": "#/definitions/headers"
        },
        "examples": {
          "$ref": "#/definitions/examples"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "headers": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/header"
      }
    },
    "header": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "vendorExtension": {
      "description": "Any property starting with x- is valid.",
      "additionalProperties": true
    },
    "bodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "schema"
      ],
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "body"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "schema": {
          "$ref": "#/definitions/schema"
        }
      },
      "additionalProperties": false
    },
    "headerParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "header"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "queryParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "query"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "formDataParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "formData"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array",
            "file"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "pathParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "required"
      ],
      "properties": {
        "required": {
          "type": "boolean",
          "enum": [
            true
          ],
          "description": "Determines whether or not this parameter is required or optional."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "path"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "nonBodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "type"
      ],
      "oneOf": [
        {
          "$ref": "#/definitions/headerParameterSubSchema"
        },
        {
          "$ref": "#/definitions/formDataParameterSubSchema"
        },
        {
          "$ref": "#/definitions/queryParameterSubSchema"
        },
        {
          "$ref": "#/definitions/pathParameterSubSchema"
        }
      ]
    },
    "parameter": {
      "oneOf": [
        {
          "$ref": "#/definitions/bodyParameter"
        },
        {
          "$ref": "#/definitions/nonBodyParameter"
        }
      ]
    },
    "schema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "title": {
        },
        "description": {
        },
        "default": {
        },
        "multipleOf": {
        },
        "maximum": {
        },
        "exclusiveMaximum": {
        },
        "minimum": {
        },
        "exclusiveMinimum": {
        },
        "maxLength": {
          "type": "integer"
        },
        "minLength": {
          "type": "integer"
        },
        "pattern": {
        },
        "maxItems": {
          "type": "integer"
        },
        "minItems": {
          "type": "integer"
        },
        "uniqueItems": {
        },
        "maxProperties": {
          "type": "integer"
        },
        "minProperties": {
          "type": "integer"
        },
        "required": {
        },
        "enum": {
        },
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "boolean"
            }
          ],
          "default": {}
        },
        "type": {
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/schema"
              }
            }
          ],
          "default": {}
        },
        "allOf": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/schema"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema"
          },
          "default": {}
        },
        "discriminator": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "xml": {
          "$ref": "#/definitions/xml"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "fileSchema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "type"
      ],
      "properties": {
        "format": {
          "type": "string"
        },
        "title": {
        },
        "description": {
        },
        "default": {
        },
        "required": {
        },
        "type": {
          "type": "string",
          "enum": [
            "file"
          ]
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "primitivesItems": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "security": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityRequirement"
      },
      "uniqueItems": true
    },
    "securityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "uniqueItems": true
      }
    },
    "xml": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "tag": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "securityDefinitions": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/basicAuthenticationSecurity"
          },
          {
            "$ref": "#/definitions/apiKeySecurity"
          },
          {
            "$ref": "#/definitions/oauth2ImplicitSecurity"
          },
          {
            "$ref": "#/definitions/oauth2PasswordSecurity"
          },
          {
            "$ref": "#/definitions/oauth2ApplicationSecurity"
          },
          {
            "$ref": "#/definitions/oauth2AccessCodeSecurity"
          }
        ]
      }
    },
    "basicAuthenticationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "basic"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "apiKeySecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name",
        "in"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "apiKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "header",
            "query"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ImplicitSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "implicit"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2PasswordSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "password"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ApplicationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "application"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2AccessCodeSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "accessCode"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2Scopes": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "mediaTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/mimeType"
      },
      "uniqueItems": true
    },
    "parametersList": {
      "type": "array",
      "description": "The parameters needed to send a valid API call.",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/parameter"
          },
          {
            "$ref": "#/definitions/jsonReference"
          }
        ]
      },
      "uniqueItems": true
    },
    "schemesList": {
      "type": "array",
      "description": "The transfer protocol of the API.",
      "items": {
        "type": "string",
        "enum": [
          "http",
          "https",
          "ws",
          "wss"
        ]
      },
      "uniqueItems": true
    },
    "collectionFormat": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes"
      ],
      "default": "csv"
    },
    "collectionFormatWithMulti": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes",
        "multi"
      ],
      "default": "csv"
    },
    "title": {
    },
    "description": {
    },
    "default": {
    },
    "multipleOf": {
    },
    "maximum": {
    },
    "exclusiveMaximum": {
    },
    "minimum": {
    },
    "exclusiveMinimum": {
    },
    "maxLength": {
      "type": "integer"
    },
    "minLength": {
      "type": "integer"
    },
    "pattern": {
    },
    "maxItems": {
      "type": "integer"
    },
    "minItems": {
      "type": "integer"
    },
    "uniqueItems": {
    },
    "enum": {
    },
    "jsonReference": {
      "type": "object",
      "required": [
        "$ref"
      ],
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "type": "string"
        }
      }
    }
  }
}
,
"reconciliation-query-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/reconciliation-query.json",
  "type": "object",
  "description": "This schema validates the JSON serialization of any reconciliation query batch, i.e. the payload of a POST to a reconciliation endpoint.",
  "definitions": {
    "property_value": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "type": "object",
          "description": "A property value which represents another entity, for instance if it was previously reconciled itself",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        }
      ]
    }
  },
  "required": [
    "queries"
  ],
  "properties": {
    "queries": {
      "type": "array",
      "description": "A list of queries to be processed by the service",
      "items": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "A string to be matched against the name of the entities"
          },
          "type": {
            "description": "A type identifier indicating which class of entities to restrict the search to",
            "type": "string"
          },
          "limit": {
            "type": "number",
            "description": "The maximum number of candidates to return"
          },
          "lang": {
            "type": "string",
            "description": "The text-processing language for the query"
          },
          "properties": {
            "type": "array",
            "description": "An optional list of property mappings to refine the query",
            "items": {
              "type": "object",
              "properties": {
                "pid": {
                  "type": "string",
                  "description": "The identifier of the property, whose values will be compared to the values supplied"
                },
                "v": {
                  "description": "A value (or array of values) to match against the property values associated with the property on each candidate",
                  "oneOf": [
                    {
                      "$ref": "#/definitions/property_value"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/property_value"
                      }
                    }
                  ]
                }
              },
              "required": [
                "pid",
                "v"
              ]
            }
          },
          "type_strict": {
            "type": "string",
            "description": "A classification of the type matching strategy when multiple types are supplied",
            "enum": [
              "any",
              "should",
              "all"
            ]
          }
        },
        "anyOf": [
          {
            "required": [
              "query"
            ]
          },
          {
            "required": [
              "properties"
            ],
            "properties": {
              "properties": {
                "type": "array",
                "minItems": 1
              }
            }
          }
        ],
        "additionalProperties": false
      }
    }
  }
}
,
"reconciliation-result-batch":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/reconciliation-result-batch.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON serialization of any reconciliation result batch.",
  "required": [
    "results"
  ],
  "properties": {
    "results": {
      "type": "array",
      "description": "The list of candidates for each reconciliation query, in the same order",
      "items": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Entity identifier of the candidate"
                },
                "name": {
                  "type": "string",
                  "description": "Entity name of the candidate"
                },
                "description": {
                  "type": "string",
                  "description": "Optional description of the candidate entity"
                },
                "score": {
                  "type": "number",
                  "description": "Number indicating how likely it is that the candidate matches the query"
                },
                "features": {
                  "type": "array",
                  "description": "A list of features which can be used to derive a matching score",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "A unique string identifier for the feature"
                      },
                      "name": {
                        "type": "string",
                        "description": "A human-readable name for the feature"
                      },
                      "value": {
                        "description": "The value of the feature for this reconciliation candidate",
                        "oneOf": [
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "value"
                    ]
                  }
                },
                "match": {
                  "type": "boolean",
                  "description": "Boolean value indicating whether the candiate is a certain match or not."
                },
                "type": {
                  "type": "array",
                  "description": "Types the candidate entity belongs to",
                  "items": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "A type can be given by id and name",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      {
                        "type": "string",
                        "description": "Alternatively, if only a string is given, it is treated as the id"
                      }
                    ]
                  }
                }
              },
              "required": [
                "id",
                "name",
                "score"
              ]
            }
          }
        },
        "required": [
          "candidates"
        ]
      }
    }
  }
}
,
"suggest-entities-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/suggest-entities-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for entities.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested entity"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          },
          "notable": {
            "type": "array",
            "description": "Types the suggest entity belongs to",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "A type can be given by id and name",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                {
                  "type": "string",
                  "description": "Alternatively, if only a string is given, it is treated as the id"
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-properties-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/suggest-properties-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for properties.",
  "properties": {
    "result": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the suggested property"
          },
          "name": {
            "type": "string",
            "description": "Name of the suggested property"
          },
          "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
          }
        },
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "required": [
    "result"
  ]
}
,
"suggest-types-response":
{
  "$schema": "http://json-schema.org/schema#",
  "$id": "https://reconciliation-api.github.io/specs/draft/schemas/suggest-types-response.json",
  "type": "object",
  "description": "This schema can be used to validate the JSON response of a suggest service for types.",
  "properties": {
    "result": {
      "type": "array",
      "items": { "$ref": "type.json" }
    }
  },
  "required": [
    "result"
  ]
}
,
"type":
{
    "$id": "https://reconciliation-api.github.io/specs/draft/schemas/type.json",
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "description": "Identifier of the suggested type"
        },
        "name": {
            "type": "string",
            "description": "Name of the suggested type"
        },
        "description": {
            "type": "string",
            "description": "An optional description which can be provided to disambiguate namesakes, providing more context."
        },
        "broader": {
            "type": "array",
            "description": "An optional array of types, each representing a direct (i.e., immediate) broader category of entities.",
            "items": {
                "$ref": "type.json"
            }
        }
    },
    "required": [
        "id",
        "name"
    ]
}
,
},
};
